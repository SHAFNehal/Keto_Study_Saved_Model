{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "PredictionModel_Deployment_V0.02.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SHAFNehal/Keto_Study_Saved_Model/blob/main/PredictiveControl_Ver00\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RstKyxwa2R_J",
        "outputId": "01974947-e091-4159-a391-69bef4c14618"
      },
      "source": [
        "!pip install scikit-learn==0.22.1"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-learn==0.22.1\n",
            "  Downloading scikit_learn-0.22.1-cp37-cp37m-manylinux1_x86_64.whl (7.0 MB)\n",
            "\u001b[K     |████████████████████████████████| 7.0 MB 1.7 MB/s \n",
            "\u001b[?25hRequirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.22.1) (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.22.1) (1.19.5)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn==0.22.1) (1.1.0)\n",
            "Installing collected packages: scikit-learn\n",
            "  Attempting uninstall: scikit-learn\n",
            "    Found existing installation: scikit-learn 1.0.1\n",
            "    Uninstalling scikit-learn-1.0.1:\n",
            "      Successfully uninstalled scikit-learn-1.0.1\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "imbalanced-learn 0.8.1 requires scikit-learn>=0.24, but you have scikit-learn 0.22.1 which is incompatible.\u001b[0m\n",
            "Successfully installed scikit-learn-0.22.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HF6ga0N-aml1",
        "outputId": "adef3d6a-5de6-46a0-c7a7-8d5edb75aeb3"
      },
      "source": [
        "# Getting the data from open repo \n",
        "!git clone https://github.com/SHAFNehal/Keto_Study_Saved_Model\n",
        "# Changing the data directory\n",
        "%cd Keto_Study_Saved_Model"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'Keto_Study_Saved_Model'...\n",
            "remote: Enumerating objects: 72, done.\u001b[K\n",
            "remote: Counting objects: 100% (72/72), done.\u001b[K\n",
            "remote: Compressing objects: 100% (72/72), done.\u001b[K\n",
            "remote: Total 72 (delta 54), reused 0 (delta 0), pack-reused 0\u001b[K\n",
            "Unpacking objects: 100% (72/72), done.\n",
            "/content/Keto_Study_Saved_Model\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kSR4Fn23aCu8"
      },
      "source": [
        "# Import necessary Libraries\n",
        "# Fix the Seed\n",
        "import os\n",
        "import numpy as np\n",
        "import random as rn\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "\n",
        "\n",
        "from tensorflow.keras.models import model_from_json\n",
        "#from sklearn.externals import joblib\n",
        "import joblib\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "tf.compat.v1.disable_eager_execution()"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KflpShYqanfR"
      },
      "source": [
        "# Fix random seed\n",
        "rn.seed(123)\n",
        "np.random.seed(123)\n",
        "tf.random.set_seed(123)\n",
        "os.environ['PYTHONHASHSEED'] = '0'\n",
        "\n",
        "# Turn of Warning\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y0SVZjz4a2uP"
      },
      "source": [
        "# Define necessary functions\n",
        "# Load Weight\n",
        "def load_model(StudyGroup):\n",
        "    # Load Model\n",
        "    json_file = open(StudyGroup + \"_model.json\", 'r')\n",
        "    loaded_model_json = json_file.read()\n",
        "    json_file.close()\n",
        "    model = model_from_json(loaded_model_json)\n",
        "    print('Model Loaded!')\n",
        "    # load weight\n",
        "    model.load_weights(StudyGroup + \"_model_weight.h5\")\n",
        "    print('Weights Loaded!\\nStudy Group:' + StudyGroup)\n",
        "    return model\n",
        "\n",
        "# Load Scale\n",
        "def Load_Scale(scalerfile):\n",
        "    # Load the data Scale\n",
        "    scale = joblib.load(scalerfile + \"_model.sav\")\n",
        "    print(\"Scale file Loading Complete!!\")\n",
        "    return scale"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "smF9mJUUbnE4"
      },
      "source": [
        "# A. Choice of StudyGroups\n",
        "1: low_fat_low_calorie_group_obese_only\n",
        "\n",
        "2: low_fat_low_calorie_group_obese__diabetes\n",
        "\n",
        "3: ketogenic_group_obese_only\n",
        "\n",
        "4: low_fat_low_calorie_group_obese_diabetes__kidney_disease\n",
        "\n",
        "5: ketogenic_group_obese__diabetes\n",
        "\n",
        "6: ketogenic_group_obese_diabetes__kidney_disease"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-EoKkyY4jvcG"
      },
      "source": [
        "# B. Make sure you define the data as per study. The order should be - \n",
        "\n",
        "## 1. When you are predicting the group with only weights\n",
        "**Input**: [carbs, fat, fiber,  protein, Intake_Calories, activity_calories, steps, weight(That day)]\n",
        "\n",
        "**Output**: [weight(Next day)]\n",
        "\n",
        "## 2. When you are predicting the group with glucose, weight and ketone\n",
        "**Input**: [carbs, fat, fiber,  protein, Intake_Calories, activity_calories, steps, Glucose (That Day), Ketone(That Day), weight(That day)]\n",
        "\n",
        "**Output**: [Glucose (Next Day), Ketone(Next Day), weight(Next day)]\n",
        "\n",
        "## 3. When you are predicting the group with only weight and ketone\n",
        "**Input**: [carbs, fat, fiber,  protein, Intake_Calories, activity_calories, steps, Ketone(That Day), weight(That day)]\n",
        "\n",
        "**Output**: [Ketone(Next Day), weight(Next day)]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MNbOUaOHm5MF"
      },
      "source": [
        "# An Example\n",
        "\n",
        "Say you want to query for a patient from a certain study group. To do so, please following steps-\n",
        "\n",
        "1. First, identify the the study group from list, ***A***. Say, the \"low fat low calorie group for wight prediction\". Select the right group from there and define.\n",
        "\n",
        "2. Now, define the data (input) based on the study group as identified in ***B***. For example for the above selected study group, one will follow the order ***1 (Input)***.\n",
        "\n",
        "3. The predicted output will be on the same order as output in  ***B***. For example for the above selected study group, one will follow the order ***1 (Output)***.\n",
        "\n",
        "Check the below example."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J5bm-Iaxfcv_"
      },
      "source": [
        "# Individual prediction"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cZOJmn5ibhU8"
      },
      "source": [
        "# Study name\n",
        "StudyGroup = \"low_fat_low_calorie_group_obese__diabetes\" # Selected from list A (1)"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j2euJe3Rdmz5"
      },
      "source": [
        "# Set the data\n",
        "input_data = np.array([131.6, 23, 20, 52, 1080, 1299, 13473, 120, 60.463863]) # Selected from list B (1)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vskCYIwgwJg_",
        "outputId": "d18471d6-d931-450d-82c8-0b5dde339456"
      },
      "source": [
        "# Load Model and it's weight\n",
        "model = load_model(StudyGroup)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Loaded!\n",
            "Weights Loaded!\n",
            "Study Group:low_fat_low_calorie_group_obese__diabetes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0AFBGp6GheDR",
        "outputId": "59cdc396-ee24-40c0-d37d-22a3312857d7"
      },
      "source": [
        "# Load Scale\n",
        "data_scale = Load_Scale(StudyGroup)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Scale file Loading Complete!!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3EMvVRFzhgW8"
      },
      "source": [
        "# Scale Data\n",
        "scaled_data = data_scale.transform(input_data.reshape(1,-1))"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OdNGYKD-hiB_"
      },
      "source": [
        "# Model Prediction\n",
        "Prediction = model.predict(scaled_data)"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aXhvN16gjaID",
        "outputId": "a25c59fc-75ef-43e5-a699-7d090f9e7069"
      },
      "source": [
        "print(Prediction)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[116.29944  66.75901]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ecX0IdqzH-n3"
      },
      "source": [
        "# Predicting with CSV files. \n",
        "*Note: Look into the the \"TestData.csv* to learn how to arrange the data. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ksCJ_vfKOFEK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "213808c7-11b8-4e84-85d2-1991de07451b"
      },
      "source": [
        "# Say the file name is \"TestData.csv\" and it has two patient ID's and have some dates to be considered.\n",
        "\n",
        "# We are going to follow the same set-up for \"low fat low calorie group for wight prediction\" study group.\n",
        "# This group doesn't need \"ketone\" and \"glucose\" readings\n",
        "\n",
        "# Read the DataFile\n",
        "Data = pd.read_csv('final_compile_data_low_fat_low_calorie_group_obese__diabetes.csv')\n",
        "# Delete the columns not needed\n",
        "#Columns_to_Delete = ['ketone', 'glucose', 'ketone_t', 'glucose_t']\n",
        "#Data.drop(Columns_to_Delete, axis=1, inplace=True)\n",
        "\n",
        "Columns_to_Delete = ['glucose', 'glucose_t']\n",
        "Data.drop(Columns_to_Delete, axis=1, inplace=True)\n",
        "\n",
        "\n",
        "print('File Keys:',Data.keys())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "File Keys: Index(['id', 'date', 'carbs', 'fat', 'fiber', 'protein', 'Intake_Calories',\n",
            "       'activity_calories', 'steps', 'ketone', 'weight', 'ketone_t',\n",
            "       'weight_t'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NeH13h3TPHqf"
      },
      "source": [
        "# Select whic ID you want to query from the data\n",
        "# Say for this case we are interested in quering patient id \"1\"\n",
        "Patient_ID = 329\n",
        "k  = Data[Data['id'] == Patient_ID]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ByJEsRiUPVPD"
      },
      "source": [
        "# If you want to query after a certain date then run this line or skip it\n",
        "# Date format: YEAR-MONTH-DAY\n",
        "Date_limit_start = '2021-06-30'\n",
        "k  = k[pd.to_datetime(k['date']) >= pd.to_datetime(Date_limit_start)]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G_PHTdJgPrUc"
      },
      "source": [
        "# Check the data\n",
        "k"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "mqqjjTlZ-2Z9"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oHuw3cohPr2b"
      },
      "source": [
        "# Format the data for the model\n",
        "# Add number of outputs based on list \"B\"\n",
        "No_of_output = 2\n",
        "X, y = k.iloc[:, 2:-No_of_output], k.iloc[:, -No_of_output:]\n",
        "# Note: The y here separated is whenever we have data for the next day. If not skip the y line\n",
        "# Perform the prediction\n",
        "pred = model.predict(data_scale.transform(X.values))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "agNSrDeDY_M9"
      },
      "source": [
        "# Appending the predicted data to main data and save them\n",
        "k2 = k.assign(Predicted_Ketone = pred[:,0], Predicted_weight = pred[:,1])\n",
        "\n",
        "# Save it in drive\n",
        "k2.to_csv('Keto15_353_Predicted_data.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fcl0Ebooq-04",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dd8a3387-df4b-4ff8-acde-f4c2ce5e9f07"
      },
      "source": [
        "y.values[:, 1]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853,\n",
              "       99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853,\n",
              "       99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853,\n",
              "       99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853,\n",
              "       99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853, 99.853,\n",
              "       99.853, 99.853, 99.853, 99.853, 99.853, 99.853,    nan])"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HKXG5OMzQBNU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 250
        },
        "outputId": "931dfb7e-fb43-434f-a9d3-000d3b6097db"
      },
      "source": [
        "# Plotting the generated data\n",
        "plt.figure(figsize=(16,6))\n",
        "plt.subplot(1,2,1)\n",
        "plt.plot(pd.to_datetime(k['date']).values, y.values,'o-', label = 'Actual')\n",
        "plt.plot(pd.to_datetime(k['date']).values, pred,'x-', label = 'Predicted')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Weight (Kg)')\n",
        "plt.title('Patient ID: ' + str(Patient_ID))\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.subplot(1,2,2)\n",
        "D = y.values - pred\n",
        "plt.plot(pd.to_datetime(k['date']).values, np.array(D),'x-', label = 'Difference')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Weight Diff (Actual - Predicted) (Kg) ')\n",
        "plt.title('Patient ID:' + str(Patient_ID))\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hor0M3I1QL60"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}